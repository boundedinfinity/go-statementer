package web

import "github.com/boundedinfinity/statementer/label"

templ labelSection() {
	<div class="flex items-center flex-wrap mb-9 gap-4">
		<button
			hx-get="/labels/all"
			hx-target="#labels"
			class="btn btn-primary btn-outline btn-xs m-4"
			id="labels-all"
		>
			All
		</button>
		<button
			hx-get="/labels/taxonomy"
			hx-target="#labels"
			class="btn btn-primary btn-outline btn-xs m-4"
			id="labels-taxonomy"
		>
			Taxonomy
		</button>
		@labelNewButton()
		@labelEditButton(LABEL_EDIT_PATH)
		@newYearLabels()
	</div>
	<div
		id="labels"
		hx-trigger="load"
		hx-get="/labels/all"
		hx-target="this"
	>
		Labels...
	</div>
}

templ labelList(labels []*label.LabelViewModel) {
	<div class="flex flex-wrap gap-2">
		for _, label := range labels {
			@labelSelectionView(label)
		}
	</div>
}

templ labelTaxonomy(labels []*label.LabelViewModel) {
	<ul class="my-2">
		for _, label := range labels {
			<li class="flex gap-2" id={ attrId("label-view", label.Id.String()) }>
				@labelSelectionView(label)
				if len(label.Children) > 0 {
					<button
						hx-get={ attrPath(LABEL_EXPAND_PATH, label.Id.String()) }
						hx-target={ attrId("#label-view", label.Id.String()) }
						hx-swap="outerHTML"
					>
						<img
							if label.Expanded {
								src="/img/minus-square.svg"
							} else {
								src="/img/plus-square.svg"
							}
							class="fill-white"
						/>
					</button>
				}
				if label.Expanded {
					@labelTaxonomy(label.Children)
				}
			</li>
		}
	</ul>
}

templ labelSelectionView(label *label.LabelViewModel) {
	<div
		id={ attrId("label", label.Id.String()) }
		if label.Selected {
			class="btn btn-secondary btn-xs"
		} else {
			class="btn btn- btn-primary btn-xs"
		}
	>
		<button
			if label.Selected {
				hx-delete={ attrPath("/labels/select", label.Id.String()) }
			} else {
				hx-patch={ attrPath("/labels/select", label.Id.String()) }
			}
			hx-swap="outerHTML"
			hx-target={ attrId("#label", label.Id.String()) }
			title={ label.Description }
		>
			{ label.Name }
		</button>
		<div class="badge">{ print("%d", label.Count) }</div>
		<button
			hx-patch={ attrPath("/label/edit", label.Id.String()) }
			hx-target="#details"
			class="border-l-2 border-slate-500 pl-2"
		>
			?
		</button>
	</div>
}

templ labelNewButton() {
	<button
		hx-patch="/labels/new"
		hx-target="#details"
		class="btn btn-primary btn-outline btn-xs m-4"
	>
		New
	</button>
}

templ labelNewForm(parents []*label.LabelViewModel) {
	<form
		hx-post="/labels/new"
		hx-target="this"
		hx-swap="outerHTML"
		class="grid grid-cols-1 gap-2 justify-between align-middle w-full m-4"
		id="label-new-form"
	>
		<select class="select select-success w-full max-w-xs">
			for _, parent := range parents {
				<option value={ parent.Id.String() }>{ parent.Name }</option>
			}
		</select>
		<input
			name="name"
			type="text"
			placeholder="Name goes here..."
			class="input input-bordered flex-1"
		/>
		<input
			name="description"
			type="text"
			placeholder="Description goes here..."
			class="input input-bordered flex-1"
		/>
		<button type="submit" class="btn btn-primary btn-outline btn-xs">Save</button>
		<button
			class="btn btn-primary btn-outline btn-xs"
			hx-get="/details/null"
			hx-target="#details"
		>
			Cancel
		</button>
	</form>
}

templ labelDetailsView(label label.LabelViewModel) {
	<div id="file-title" class="w-full">
		<form
			hx-post="/labels/new"
			hx-target="this"
			hx-swap="outerHTML"
			class="grid grid-cols-1 justify-between align-middle w-full"
		>
			<input name="id" type="hidden" value={ label.Id.String() }/>
			<input
				name="name"
				type="text"
				placeholder="Name goes here..."
				class="input input-bordered flex-1"
				value={ label.Name }
			/>
			<input
				name="description"
				type="text"
				placeholder="Description goes here..."
				class="input input-bordered flex-1"
				value={ label.Description }
			/>
			<button type="submit" class="btn btn-outline btn-xs">Edit</button>
			<button type="submit" class="btn btn-outline btn-xs">Cancel</button>
		</form>
	</div>
}

templ newYearLabels() {
	<form id="label-generate-year" class="flex btn btn-primary btn-outline btn-sm">
		<button
			hx-post="/labels/year"
			hx-target="#label-generate-year"
			hx-swap="outerHTML"
		>
			Generate Year Labels
		</button>
		<input type="text" name="year" class="ml-4 w-[8ch] input input-xs input-bordered"/>
	</form>
}

templ labelCheckBoxen(labels []*label.LabelViewModel) {
	<div class="flex flex-wrap gap-2">
		for _, label := range labels {
			<div class="btn btn-primary btn-sm" title={ label.Description }>
				{ label.Name }
				<input
					type="checkbox"
					class="checkbox checkbox-primary"
					name="label"
					checked?={ label.Checked }
					value={ label.Id.String() }
				/>
			</div>
		}
	</div>
}
