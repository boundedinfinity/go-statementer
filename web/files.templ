package web

import "github.com/boundedinfinity/statementer/model"

templ filesDetails(file *model.FileDescriptor) {
	<div
		class="card bg-base-100 w-full shadow-xl h-[1600px]"
		hx-trigger={ attrId("file-updated", file.Id.String()) }
		hx-get={ attrPath("/files/details", file.Id.String()) }
		hx-target="#details"
	>
		<div>
			<table class="table table-zebra table-pin-rows">
				<tbody class="font-semibold">
					<tr>
						<td>Name:</td>
						<td>
							@fileViewTitle(file)
						</td>
					</tr>
					<tr>
						<td>Repository Path:</td>
						<td>
							{ file.RepoPath }
						</td>
					</tr>
					<tr>
						<td>Sources:</td>
						<td>
							@fileSourcePaths(file)
						</td>
					</tr>
					<tr>
						<td>Labels:</td>
						<td>
							@fileLabelView(file)
						</td>
					</tr>
					<tr>
						<td>Size:</td>
						<td>{ file.Size.Human() }</td>
					</tr>
					<tr>
						<td>ID:</td>
						<td>{ file.Id.String() }</td>
					</tr>
					<tr>
						<td>Hash:</td>
						<td>{ file.Hash }</td>
					</tr>
				</tbody>
			</table>
		</div>
		<div
			class="overflow-scroll h-[1600px] mt-6"
			hx-get={ attrPath("/open/document", file.Id.String()) }
			hx-target="#document"
			hx-trigger="load"
		>
			<div id="document" class="h-[1600px]"></div>
		</div>
	</div>
}

templ fileViewTitle(file *model.FileDescriptor) {
	<div id="file-title" class="flex justify-between align-middle w-full">
		<div>
			if file.Title == "" {
				[UNTITLED]
			} else {
				{ file.Title }
			}
		</div>
		<div>
			<button
				hx-patch={ attrPath("/files/title", file.Id.String()) }
				hx-target="#file-title"
				class="btn btn-primary btn-outline btn-xs"
			>
				Edit
			</button>
		</div>
	</div>
}

templ fileEditTitle(file *model.FileDescriptor) {
	<div id="file-title" class="w-full">
		<form
			hx-post={ attrPath("/files/title", file.Id.String()) }
			hx-target="#file-title"
			class="flex justify-between align-middle w-full"
		>
			<input name="id" type="hidden" value={ file.Id.String() }/>
			<input
				name="title"
				type="text"
				placeholder="Title goes here..."
				class="input input-bordered flex-1"
				value={ file.Title }
			/>
			<button type="submit" class="btn btn-primary btn-outline btn-xs">Save</button>
		</form>
	</div>
}

templ fileSourcePaths(file *model.FileDescriptor) {
	<div>
		for _, path := range file.SourcePaths {
			<p class="text-ellipsis hover:text-clip">{ path } </p>
		}
	</div>
}

templ filesList(files model.FileDescriptors) {
	<div class="overflow-x-auto">
		<table class="table table-zebra table-pin-rows">
			<caption class="font-bold text-2xl">All Files ({ print("%d", len(files)) })</caption>
			<thead class="font-semibold">
				<tr>
					<th>Document</th>
					<th></th>
				</tr>
			</thead>
			<tbody class="font-semibold">
				for _, file := range files {
					<tr>
						<td>
							<div>
								if file.Title != "" {
									{ file.Title }
								} else {
									@fileSourcePaths(file)
								}
							</div>
							<div class="mt-2">
								@labelList(file.Labels)
							</div>
						</td>
						<td>
							<button
								hx-get={ attrPath("/files/details", file.Id.String()) }
								hx-target="#details"
								class="btn btn-primary btn-outline"
							>
								View
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ fileLabelView(file *model.FileDescriptor) {
	<div id="file-labels" class="flex justify-between">
		@labelList(file.Labels)
		<button
			hx-patch={ attrPath("/files/label", file.Id.String()) }
			hx-target="#file-labels"
			hx-swap="outerHTML"
			class="btn btn-primary btn-outline btn-xs"
		>
			Edit
		</button>
	</div>
}

templ fileLabelEdit(file *model.FileDescriptor, labels []*model.SimpleLabel) {
	<div id="file-labels">
		@labelList(file.Labels)
		<form
			class="flex justify-between border-2 border-primary my-4 p-2 gap-2"
			hx-post={ attrPath("/files/label", file.Id.String()) }
			hx-target="#file-labels"
			hx-swap="outerHTML"
		>
			@labelCheckBoxen(labels)
			<input name="id" type="hidden" value={ file.Id.String() }/>
			<button class="btn btn-primary btn-outline btn-xs">
				Save
			</button>
			<button
				class="btn btn-primary btn-outline btn-xs"
				hx-get={ attrPath("/files/label", file.Id.String()) }
				hx-target="#file-labels"
				hx-swap="outerHTML"
			>
				Cancel
			</button>
		</form>
	</div>
}

templ filesDuplicates(fileMap map[string][]*model.FileDescriptor) {
	<div class="overflow-x-auto">
		<table class="table table-zebra table-pin-rows">
			<caption class="font-bold text-2xl">Duplicate Files ({ print("%d", len(fileMap)) })</caption>
			<thead class="font-semibold">
				<tr>
					<th>Source Directory</th>
					<th>Count</th>
					<th></th>
				</tr>
			</thead>
			<tbody class="font-semibold">
				for _, files := range fileMap {
					<tr>
						<td>
							for _, file := range files {
								for _, path := range file.SourcePaths {
									<div>
										<p>{ path }</p>
									</div>
								}
								@documentViwerButton(file.Id.String())
							}
						</td>
						<td>
							{ print("%d", len(files)) }
						</td>
						<td>
							<button
								hx-get="/files/duplicates"
								hx-target="#results"
								class="btn btn-primary btn-outline"
							>
								Merge
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
